import { ERR_TYPE, CONFIG_ID, CONST } from "../utils/constants";
import {
  CONFIG_TABLE,
  LOTTERY_TABLE,
  USER_LOTTERY_RECORD_TABLE
} from "../utils/table";
import { toFixed3, formatDate } from "../utils/function";
export default async function checkLotteryStatus(event, callback) {
  console.log(`checkLotteryStatus - event: ${event}`);

  try {
    // 获取
    let ret = await getOpenedLottery();
    let openedLotteries = ret.data.objects;
    console.log(
      `openedLotteries: ${JSON.stringify(openedLotteries.map(item => item.id))}`
    );
    if (openedLotteries) {
      let configRes = await CONFIG_TABLE.get(CONFIG_ID);
      let config = configRes.data;

      for (let lotteryIndex in openedLotteries) {
        let lottery = openedLotteries[lotteryIndex];
        let count = await getAttendeesCount(lottery.id);
        console.log(`getAttendeesCount: ${count}`);
        let time_end = Math.round(Date.parse(lottery.open_date) / 1000);
        let time_now = Math.round(new Date() / 1000);
        let time_distance = time_end - time_now;

        if (count >= lottery.open_people_num) {
          console.log(`开奖 - lottery.id: ${lottery.id}`);
          let lotteryUpdate = LOTTERY_TABLE.getWithoutData(lottery.id);

          // 更新 lottery status 为 3
          // 更新发起抽奖者的 user 表的 lucky_num，在触发器里面更新
          lotteryUpdate.set("status", CONST.OPENED);
          await lotteryUpdate.update();

          // 随机抽出幸运儿，更新到 userLotteryTable lottery_result，更新幸运儿的 balance 或者运气值

          let index_hongbao = config.plans_lottery_package[lottery.plan_index];
          let seed_hongbao = LUCKY_SEED_HONGBAO.slice(0, index_hongbao);
          let price_per =
            (lottery.total_prize / CONST.MONEY_UNIT / CONST.HONHBAO_RATIO) *
            CONST.MONEY_UNIT;
          // 发起通知通知所有参与抽奖的用户已经开奖
          await updateUserLotteryRecords(seed_hongbao, lottery, 1, price_per);

          let index_fudai = config.plans_lucky_package[lottery.plan_index];
          let seed_fudai = LUCKY_SEED_FUDAI.slice(0, index_fudai);
          await updateUserLotteryRecords(
            seed_fudai,
            lottery,
            2,
            lottery.lucky_num_per
          );
        } else if (count < lottery.open_people_num && time_distance <= 0) {
          // 已经有另一个触发器处理
        }
      }
      callback(null, "success");
    } else {
      callback(ERR_TYPE.GET_LOTTERY_FAILED);
    }
  } catch (e) {
    callback(e);
  }
}

const updateUserLotteryRecords = async (offsets, lottery, status, value) => {
  let results = [];

  let luckyQuery = new wx.BaaS.Query();
  luckyQuery.compare("lottery", "=", LOTTERY_TABLE.getWithoutData(lottery.id));

  let rawResult = await USER_LOTTERY_RECORD_TABLE.setQuery(luckyQuery)
    .offset(0)
    .limit(1000)
    .orderBy("-weight")
    .find();
  let rawResultData = rawResult.data.objects;

  for (let i = 0; i < offsets.length; i++) {
    if (offsets[i] < rawResultData.length) {
      results.push(rawResultData[offsets[i]]);
    }
  }

  // 取出 id
  let ids = results.map(ret => {
    return ret.id;
  });

  if (ids.length <= 0) {
    return;
  }

  // 先根据 offsets 查出数据行 id，在通过数据行 id 更新数据行的 is_lucky & lottery_id 字段
  let luckyQueryUpdate = new wx.BaaS.Query();
  // 通过 id in 查询来更新
  luckyQueryUpdate.in("id", ids);
  luckyQueryUpdate.compare("lottery_result", "=", 0);
  luckyQueryUpdate.compare(
    "lottery",
    "=",
    LOTTERY_TABLE.getWithoutData(lottery.id)
  );
  let luckyRecord = USER_LOTTERY_RECORD_TABLE.getWithoutData(luckyQuery);
  if (status === 1) {
    luckyRecord.set("balance", value);
  } else {
    luckyRecord.set("lucky_num", value);
  }
  luckyRecord.set("lottery_result", status);
  let resUpdate = await luckyRecord.update();

  let updateIds = resUpdate.data.operation_result.map(item => item.success.id);
  let queryUserIds = new wx.BaaS.Query();
  queryUserIds.in("id", updateIds);
  let userIdsRes = await USER_LOTTERY_RECORD_TABLE.setQuery(queryUserIds)
    .select("user_id")
    .find();
  let userIds = userIdsRes.data.objects.map(item => item.user_id);

  let data = {
    recipient_type: "user_list",
    user_list: userIds,
    template_id: "PGXKodkuaE7k1bmXsQ9c-gPEcmnPY0am97nd9cOuI_0",
    submission_type: "form_id",
    page: `pages/attend_lottery/attend_lottery?id=${lottery.id}`,
    keywords: {
      keyword1: {
        value: `${lottery.nickname}发起的抽奖`
      },
      keyword2: {
        value: "恭喜你，已经抽中红包"
      },
      keyword3: {
        value: `${formatDate(Date.now())}`
      },
      keyword4: {
        value: `${lottery.id}`
      }
    }
  };

  return wx.BaaS.sendTemplateMessage(data);
};

export async function getAttendeesCount(id) {
  let query = new wx.BaaS.Query();
  // 处于开奖的状态
  query.compare("lottery", "=", LOTTERY_TABLE.getWithoutData(id));
  return USER_LOTTERY_RECORD_TABLE.setQuery(query).count();
}

export async function getOpenedLottery() {
  let query = new wx.BaaS.Query();
  // 处于开奖的状态
  query.compare("status", "=", 2);
  return LOTTERY_TABLE.setQuery(query)
    .limit(10)
    .find();
}

// prettier-ignore
export const LUCKY_SEED_HONGBAO = [
  0, 1, 2, 3, 5,
  6, 7, 8, 9,
  10, 12, 16, 18,
  20, 22, 26, 28,
  30, 32, 36, 38,
  40, 42, 46, 48,
  50, 52, 56, 58,
  60, 62, 66, 68,
  70, 72, 78, 80,
  81, 82, 83, 85,
  86, 87, 88, 89,
  90, 92, 96, 99,
  100, 102, 106, 108,
  110, 112, 116, 118,
  120, 122, 126, 128,
  150, 152, 156, 158,
  160, 162, 166, 168,
  170, 172, 176, 178,
  180, 182, 186, 188,
  200, 202, 206, 208,
  510, 512, 516, 518,
  555, 666, 777, 888,
  610, 612, 616, 618,
  190, 192, 196, 199,
  130, 132, 136, 138 //没有倒数第二排的吉利，所以放在后面
];

export const LUCKY_SEED_FUDAI = [
  4,
  11,
  13,
  14,
  15,
  17,
  19,
  21,
  23,
  24,
  25,
  27,
  29,
  31,
  33,
  34,
  35,
  37,
  39,
  41,
  43,
  44,
  45,
  47,
  49,
  51,
  53,
  54,
  55,
  57,
  59,
  61,
  63,
  64,
  65,
  67,
  69,
  71,
  73,
  74,
  76,
  79,
  84,
  91,
  93,
  94,
  95,
  97,
  98,
  101,
  103,
  104,
  105,
  107,
  109,
  111,
  113,
  114,
  115,
  117,
  119,
  121,
  123,
  124,
  125,
  127,
  129,
  131,
  133,
  134,
  135,
  137,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  146,
  147,
  148,
  149,
  151,
  153,
  154,
  155,
  157,
  159,
  161,
  163,
  164,
  165,
  167,
  169,
  171,
  173,
  174,
  177,
  179,
  181,
  183,
  184,
  185,
  187,
  189,
  191,
  193,
  194,
  195,
  197,
  201,
  203,
  205,
  207,
  209,
  211,
  212,
  213,
  214,
  215,
  216,
  217,
  218,
  219,
  220,
  221,
  222,
  223,
  224,
  225,
  226,
  227,
  228
];
